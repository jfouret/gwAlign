#!/usr/bin/env python
import argparse
version='SEDMATCHGITVERSION'
year=2017
author='Julien FOURET'
contact='julien@fouret.me'

parser = argparse.ArgumentParser(description='Use gwAlign blast results to convert kgIDs to uniprot id an then download gene names',epilog="Version : "+str(version)+"\n"+str(year)+"\nAuthor : "+author+" for more informations or enquiries please contact "+contact,formatter_class=argparse.ArgumentDefaultsHelpFormatter)

parser.add_argument('-dict', metavar='/path/kgPathDictFile.tab', required=True, help="path of kgPathDictFile.tab")
parser.add_argument('-name', metavar='name', required=True, help="name of subfolder to pick for filtered data")
parser.add_argument('-input', metavar='/path', required=False, help="input list, default in stdin",default='-')
parser.add_argument('-out', metavar='/path', required=False, help="output list without header",default='-')

args=parser.parse_args()

import httplib2 as http
import urllib2
import json
import sys
import re

try:
	from urlparse import urlparse
except ImportError:
	from urllib.parse import urlparse

kgPathDict=dict()
with open(args.dict,'r') as kgPathDictFile:
	for line in kgPathDictFile.readlines():
		key,value=line.rstrip().split("\t")
		kgPathDict[key]=value

if args.input=='-':
	inputFile=sys.stdin
else:
	inputFile=open(args.input)


def get_symbol(uniprot_id):
	symbol={
		"primary":"",
		"secondaries":"",
	}
	if uniprot_id!="None":
		target_url="https://www.uniprot.org/uniprot/?query="+uniprot_id.split('-')[0]+"&format=tab&compress=no&columns=id,genes"
		data = urllib2.urlopen(target_url)
		for line in data:
			m=re.match(uniprot_id.split('-')[0]+'\s+(\S+)\s?(.*)',line)
			if m:
				symbol={
					"primary":m.group(1),
					"secondaries":m.group(2),
				}
				break
	return(symbol)


def get_annot(uniprot_id,kgID):
	try_again=True
	count_try=0
	while (try_again):
		try:
			symbol=get_symbol(uniprot_id)
			try_again=False
		except urllib2.HTTPError as e:
			count_try+=1
			try_again=count_try<10
	return([kgID,uniprot_id,symbol["primary"],symbol["secondaries"]])

cpu=12
from multiprocessing import Pool
pool=Pool(processes=cpu)
jobs=[]

for kg_id in inputFile.readlines():
	kg_id=kg_id.rstrip()
	with open(kgPathDict[kg_id]+"/"+args.name+"/blast.txt") as b_file:
		jobs.append(pool.apply_async(get_annot,args=(b_file.readline().rstrip().split("\t")[0],kg_id)))

inputFile.close()
pool.close()

if args.out=='-':
	outFile=sys.stdout
else:
	outFile=open(args.out,'w')

while len(jobs)!=0:
	for i in range(0,min(cpu+1,len(jobs))):
		if jobs[i].ready():
			outFile.write("\t".join(jobs[i].get(5))+"\n")
			del jobs[i]
			break
pool.join()	

outFile.close()

sys.exit()





